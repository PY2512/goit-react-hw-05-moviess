{"version":3,"file":"static/js/castSubview.d7912e11.chunk.js","mappings":"oSACA,GAAgB,KAAO,mBAAmB,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,mBAAmB,UAAY,yB,SCoEtI,EAzDa,WACT,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAASK,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,gHAEOC,EAAAA,EAAAA,IAAkBZ,GAFzB,mBAGI,KADZG,EAFQ,EAERA,MACCU,OAHO,uBAIhBC,EAAAA,GAAAA,KAAW,cACXL,EAAUF,EAAAA,EAAAA,MALM,0BAQhBH,EAAQD,GACRM,EAAUF,EAAAA,EAAAA,UATM,kDAWhBD,EAAS,EAAD,IACRF,EAAQ,IACRK,EAAUF,EAAAA,EAAAA,UAbM,0DAAH,qDAgBjBI,MACD,CAACX,KAGA,gCACCQ,IAAWD,EAAAA,EAAAA,UAAkB,SAACQ,EAAA,EAAD,IAE7BP,IAAWD,EAAAA,EAAAA,WACR,eAAIS,UAAWC,EAAAA,KAAf,SACCd,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACN,gBAAaN,UAAWC,EAAAA,MAAxB,WACA,gBACID,UAAWC,EAAAA,MACXM,IACAH,EAAY,0CAC6BA,GACnCI,EAENC,IAAI,WAER,cAAGT,UAAWC,EAAAA,KAAd,SAA2BI,KAC3B,cAAGL,UAAWC,EAAAA,UAAd,SAAgCK,GAAa,cAXpCH,QAiBhBX,IAAWD,EAAAA,EAAAA,UAAmBF,IAC3B,6D","sources":["webpack://goit-react-hw-05-movies/./src/views/MoviesDetailsView/Cast/Cast.module.css?3eaf","views/MoviesDetailsView/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__4JxMe\",\"item\":\"Cast_item__50fBo\",\"photo\":\"Cast_photo__RpYnq\",\"name\":\"Cast_name__sZrx4\",\"character\":\"Cast_character__QprrC\"};","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { fetchMovieCredits } from './../../../services/moviesApi';\r\nimport noAvatar from './../../../images/no-avatar.png';\r\n\r\nimport Status from './../../../services/Status';\r\n\r\nimport Loader from './../../../components/Loader/Loader';\r\nimport style from './Cast.module.css';\r\n\r\nconst Cast = () => {\r\n    const { movieId } = useParams();\r\n    const [cast, setCast] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [status, setStatus] = useState(Status.IDLE);\r\n\r\n    useEffect(() => {\r\n        const fetchActors = async () => {\r\n        try {\r\n            const { cast } = await fetchMovieCredits(movieId);\r\n            if (cast.length === 0) {\r\n            toast.info('No results');\r\n            setStatus(Status.IDLE);\r\n            return;\r\n            }\r\n            setCast(cast);\r\n            setStatus(Status.RESOLVED);\r\n        } catch (error) {\r\n            setError(error);\r\n            setCast([]);\r\n            setStatus(Status.REJECTED);\r\n        }\r\n        };\r\n        fetchActors();\r\n    }, [movieId]);\r\n\r\n    return (\r\n        <>\r\n        {status === Status.PENDING && <Loader />}\r\n\r\n        {status === Status.RESOLVED && (\r\n            <ul className={style.list}>\r\n            {cast.map(({ id, profile_path, name, character }) => (\r\n                <li key={id} className={style.actor}>\r\n                <img\r\n                    className={style.photo}\r\n                    src={\r\n                    profile_path\r\n                        ? `https://image.tmdb.org/t/p/w500/${profile_path}`\r\n                        : noAvatar\r\n                    }\r\n                    alt=\"actor\"\r\n                />\r\n                <p className={style.name}>{name}</p>\r\n                <p className={style.character}>{character || 'unknown'}</p>\r\n                </li>\r\n            ))}\r\n            </ul>\r\n        )}\r\n\r\n        {status === Status.REJECTED && error && (\r\n            <p>Whoops, something went wrong</p>\r\n        )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Cast;"],"names":["movieId","useParams","useState","cast","setCast","error","setError","Status","status","setStatus","useEffect","fetchActors","fetchMovieCredits","length","toast","Loader","className","style","map","id","profile_path","name","character","src","noAvatar","alt"],"sourceRoot":""}